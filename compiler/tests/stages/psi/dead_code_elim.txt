Function psi(A!0: shared[list[int; ?]], SA!0: plaintext[int], B!0: shared[list[int; ?]], SB!0: plaintext[int], result!0: shared[list[int; ?]]) -> shared[list[int; ?]]:
Entry block: 0
Exit block: 3
Block 0:
    jump
Block 1:
    result!1 = Φ(result!0, result!2)
    for i!1: plaintext[int] in range(0, SA!0)
Block 2:
    flag!2 = False
    jump
Block 3:
    return result!1
Block 4:
    flag!3 = Φ(flag!2, flag!5)
    for j!1: plaintext[int] in range(0, SB!0)
Block 5:
    !1!3 = (A!0[i!1] == B!0[j!1])
    conditional jump !1!3
Block 6:
    val!2 = result!1[i!1]
    conditional jump flag!3
Block 7:
    jump
Block 8:
    flag!4 = True
    jump
Block 9:
    (merge from conditional jump !1!3)
    flag!5 = MUX(!1!3, flag!4, flag!3)
    jump
Block 10:
    jump
Block 11:
    val!3 = A!0[i!1]
    jump
Block 12:
    (merge from conditional jump flag!3)
    val!4 = MUX(flag!3, val!3, val!2)
    result!2 = Update(result!1, i!1, val!4)
    jump
Edges: (0, 1, *) (1, 3, F) (1, 2, T) (2, 4, *) (4, 6, F) (4, 5, T) (5, 7, F) (5, 8, T) (6, 10, F) (6, 11, T) (7, 9, *) (8, 9, *) (9, 4, *) (10, 12, *) (11, 12, *) (12, 1, *)
