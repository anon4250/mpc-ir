Function longest_odd_10(Seq: shared[list[int; ?]], N: plaintext[int], Syms: shared[list[int; ?]]) -> shared[int]:
Entry block: 0
Exit block: 3
Block 0:
    current_length = 0
    max_length = 0
    s2 = False
    jump
Block 1:
    for i: plaintext[int] in range(0, N)
Block 2:
    !1 = (Seq[i] == Syms[1])
    s1 = (s2 and !1)
    conditional jump s1
Block 3:
    return max_length
Block 4:
    !2 = not s2
    conditional jump !2
Block 5:
    current_length = (current_length + 1)
    jump
Block 6:
    (merge from conditional jump s1)
    !3 = (current_length & 1)
    !4 = (current_length & 1)
    !5 = (!4 == 1)
    !6 = (current_length > max_length)
    !7 = (!5 and !6)
    conditional jump !7
Block 7:
    jump
Block 8:
    current_length = 0
    jump
Block 9:
    (merge from conditional jump !2)
    jump
Block 10:
    jump
Block 11:
    max_length = current_length
    jump
Block 12:
    (merge from conditional jump !7)
    s2 = (Seq[i] == Syms[0])
    jump
Edges: (0, 1, *) (1, 3, F) (1, 2, T) (2, 4, F) (2, 5, T) (4, 7, F) (4, 8, T) (5, 6, *) (6, 10, F) (6, 11, T) (7, 9, *) (8, 9, *) (9, 6, *) (10, 12, *) (11, 12, *) (12, 1, *)
