Function longest_odd_10(Seq!0: shared[list[int; ?]], N!0: plaintext[int], Syms!0: shared[list[int; ?]]) -> shared[int]:
Entry block: 0
Exit block: 3
Block 0:
    current_length!1 = 0
    max_length!1 = 0
    s2!1 = False
    jump
Block 1:
    current_length!2 = Φ(current_length!1, current_length!6)
    max_length!2 = Φ(max_length!1, max_length!4)
    s2!2 = Φ(s2!1, s2!3)
    !1!1 = Φ(!1!0, !1!2)
    s1!1 = Φ(s1!0, s1!2)
    !2!1 = Φ(!2!0, !2!3)
    !3!1 = Φ(!3!0, !3!2)
    !4!1 = Φ(!4!0, !4!2)
    !5!1 = Φ(!5!0, !5!2)
    !6!1 = Φ(!6!0, !6!2)
    !7!1 = Φ(!7!0, !7!2)
    for i!1: plaintext[int] in range(0, N!0)
Block 2:
    !1!2 = (Seq!0[i!1] == Syms!0[1])
    s1!2 = (s2!2 and !1!2)
    conditional jump s1!2
Block 3:
    return max_length!2
Block 4:
    !2!2 = not s2!2
    conditional jump !2!2
Block 5:
    current_length!3 = (current_length!2 + 1)
    jump
Block 6:
    current_length!6 = Φ(current_length!5, current_length!3)
    !2!3 = Φ(!2!2, !2!1)
    (merge from conditional jump s1!2)
    !3!2 = (current_length!6 & 1)
    !4!2 = (current_length!6 & 1)
    !5!2 = (!4!2 == 1)
    !6!2 = (current_length!6 > max_length!2)
    !7!2 = (!5!2 and !6!2)
    conditional jump !7!2
Block 7:
    jump
Block 8:
    current_length!4 = 0
    jump
Block 9:
    current_length!5 = Φ(current_length!2, current_length!4)
    (merge from conditional jump !2!2)
    jump
Block 10:
    jump
Block 11:
    max_length!3 = current_length!6
    jump
Block 12:
    max_length!4 = Φ(max_length!2, max_length!3)
    (merge from conditional jump !7!2)
    s2!3 = (Seq!0[i!1] == Syms!0[0])
    jump
Edges: (0, 1, *) (1, 3, F) (1, 2, T) (2, 4, F) (2, 5, T) (4, 7, F) (4, 8, T) (5, 6, *) (6, 10, F) (6, 11, T) (7, 9, *) (8, 9, *) (9, 6, *) (10, 12, *) (11, 12, *) (12, 1, *)
