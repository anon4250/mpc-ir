Function kmeans_iteration(data_x!0: shared[list[int; ?]], data_y!0: shared[list[int; ?]], cluster_x!0: shared[list[int; ?]], cluster_y!0: shared[list[int; ?]], OUTPUT_cluster_x!0: shared[list[int; ?]], OUTPUT_cluster_y!0: shared[list[int; ?]], len!0: plaintext[int], num_cluster!0: plaintext[int], bestMap!0: plaintext[list[int; ?]]) -> tuple[shared[list[int; ?]], shared[list[int; ?]]]:
Entry block: 0
Exit block: 12
Block 0:
    jump
Block 1:
    bestMap!1 = Φ(bestMap!0, bestMap!2)
    for i!1: plaintext[int] in range(0, len!0)
Block 2:
    best_dist!2 = 10000
    jump
Block 3:
    jump
Block 4:
    best_dist!3 = Φ(best_dist!2, best_dist!5)
    bestMap!2 = Φ(bestMap!1, bestMap!3)
    for c!1: plaintext[int] in range(0, num_cluster!0)
Block 5:
    x_dist!3 = (cluster_x!0[c!1] - data_x!0[i!1])
    x_sq!3 = (x_dist!3 * x_dist!3)
    y_dist!3 = (cluster_y!0[c!1] - data_y!0[i!1])
    y_sq!3 = (y_dist!3 * y_dist!3)
    dist!3 = (x_sq!3 + y_sq!3)
    val!3 = bestMap!2[i!1]
    !1!3 = (dist!3 < best_dist!3)
    conditional jump !1!3
Block 6:
    jump
Block 7:
    best_dist!4 = dist!3
    val!4 = c!1
    jump
Block 8:
    jump
Block 9:
    (merge from conditional jump !1!3)
    best_dist!5 = MUX(!1!3, best_dist!4, best_dist!3)
    val!5 = MUX(!1!3, val!4, val!3)
    bestMap!3 = Update(bestMap!2, i!1, val!5)
    jump
Block 10:
    OUTPUT_cluster_x!1 = Φ(OUTPUT_cluster_x!0, OUTPUT_cluster_x!2)
    OUTPUT_cluster_y!1 = Φ(OUTPUT_cluster_y!0, OUTPUT_cluster_y!2)
    for c!2: plaintext[int] in range(0, num_cluster!0)
Block 11:
    val_x!2 = 0
    val_y!2 = 0
    count!2 = 0
    jump
Block 12:
    !4!1 = (OUTPUT_cluster_x!1, OUTPUT_cluster_y!1)
    return !4!1
Block 13:
    val_x!3 = Φ(val_x!2, val_x!5)
    val_y!3 = Φ(val_y!2, val_y!5)
    count!3 = Φ(count!2, count!5)
    for i!2: plaintext[int] in range(0, len!0)
Block 14:
    !2!3 = (c!2 == bestMap!1[i!2])
    conditional jump !2!3
Block 15:
    !3!2 = (count!3 > 0)
    conditional jump !3!2
Block 16:
    val_x!4 = (val_x!3 + data_x!0[i!2])
    val_y!4 = (val_y!3 + data_y!0[i!2])
    count!4 = (count!3 + 1)
    jump
Block 17:
    jump
Block 18:
    (merge from conditional jump !2!3)
    val_x!5 = MUX(!2!3, val_x!4, val_x!3)
    val_y!5 = MUX(!2!3, val_y!4, val_y!3)
    count!5 = MUX(!2!3, count!4, count!3)
    jump
Block 19:
    val_x!6 = (val_x!3 / count!3)
    val_y!6 = (val_y!3 / count!3)
    jump
Block 20:
    jump
Block 21:
    (merge from conditional jump !3!2)
    val_x!7 = MUX(!3!2, val_x!6, val_x!3)
    val_y!7 = MUX(!3!2, val_y!6, val_y!3)
    OUTPUT_cluster_x!2 = Update(OUTPUT_cluster_x!1, c!2, val_x!7)
    OUTPUT_cluster_y!2 = Update(OUTPUT_cluster_y!1, c!2, val_y!7)
    jump
Edges: (0, 1, *) (1, 3, F) (1, 2, T) (2, 4, *) (3, 10, *) (4, 6, F) (4, 5, T) (5, 8, F) (5, 7, T) (6, 1, *) (7, 9, *) (8, 9, *) (9, 4, *) (10, 12, F) (10, 11, T) (11, 13, *) (13, 15, F) (13, 14, T) (14, 17, F) (14, 16, T) (15, 20, F) (15, 19, T) (16, 18, *) (17, 18, *) (18, 13, *) (19, 21, *) (20, 21, *) (21, 10, *)
