Function db_cross_join_trivial(A!0: shared[list[int; ?]], Len_A!0: plaintext[int], B!0: shared[list[int; ?]], Len_B!0: plaintext[int], res!0: shared[list[int; ?]]) -> shared[list[int; ?]]:
Entry block: 0
Exit block: 3
Block 0:
    jump
Block 1:
    res!1 = Φ(res!0, res!2)
    for i!1: plaintext[int] in range(0, Len_A!0)
Block 2:
    jump
Block 3:
    return res!1
Block 4:
    res!2 = Φ(res!1, res!3)
    for j!1: plaintext[int] in range(0, Len_B!0)
Block 5:
    jump
Block 6:
    jump
Block 7:
    res!3 = Φ(res!2, res!4)
    for k!1: plaintext[int] in range(0, 3)
Block 8:
    v!4 = 0
    !1!4 = (A!0[(i!1 * 2)] == B!0[(j!1 * 2)])
    conditional jump !1!4
Block 9:
    jump
Block 10:
    jump
Block 11:
    !2!4 = (k!1 == 0)
    conditional jump !2!4
Block 12:
    (merge from conditional jump !1!4)
    v!11 = MUX(!1!4, v!10, v!4)
    res!4 = Update(res!3, ((((i!1 * Len_B!0) * 3) + (j!1 * 3)) + k!1), v!11)
    jump
Block 13:
    jump
Block 14:
    v!5 = A!0[(i!1 * 2)]
    jump
Block 15:
    (merge from conditional jump !2!4)
    v!6 = MUX(!2!4, v!5, v!4)
    !3!4 = (k!1 == 1)
    conditional jump !3!4
Block 16:
    jump
Block 17:
    v!7 = A!0[((i!1 * 2) + 1)]
    jump
Block 18:
    (merge from conditional jump !3!4)
    v!8 = MUX(!3!4, v!7, v!6)
    !4!4 = (k!1 == 2)
    conditional jump !4!4
Block 19:
    jump
Block 20:
    v!9 = B!0[((j!1 * 2) + 1)]
    jump
Block 21:
    (merge from conditional jump !4!4)
    v!10 = MUX(!4!4, v!9, v!8)
    jump
Edges: (0, 1, *) (1, 3, F) (1, 2, T) (2, 4, *) (4, 6, F) (4, 5, T) (5, 7, *) (6, 1, *) (7, 9, F) (7, 8, T) (8, 10, F) (8, 11, T) (9, 4, *) (10, 12, *) (11, 13, F) (11, 14, T) (12, 7, *) (13, 15, *) (14, 15, *) (15, 16, F) (15, 17, T) (16, 18, *) (17, 18, *) (18, 19, F) (18, 20, T) (19, 21, *) (20, 21, *) (21, 12, *)
