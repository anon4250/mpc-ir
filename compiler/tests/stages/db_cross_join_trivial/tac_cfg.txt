Function db_cross_join_trivial(A: shared[list[int; ?]], Len_A: plaintext[int], B: shared[list[int; ?]], Len_B: plaintext[int], res: shared[list[int; ?]]) -> shared[list[int; ?]]:
Entry block: 0
Exit block: 3
Block 0:
    jump
Block 1:
    for i: plaintext[int] in range(0, Len_A)
Block 2:
    jump
Block 3:
    return res
Block 4:
    for j: plaintext[int] in range(0, Len_B)
Block 5:
    jump
Block 6:
    jump
Block 7:
    for k: plaintext[int] in range(0, 3)
Block 8:
    v = 0
    !1 = (A[(i * 2)] == B[(j * 2)])
    conditional jump !1
Block 9:
    jump
Block 10:
    jump
Block 11:
    !2 = (k == 0)
    conditional jump !2
Block 12:
    (merge from conditional jump !1)
    res = Update(res, ((((i * Len_B) * 3) + (j * 3)) + k), v)
    jump
Block 13:
    jump
Block 14:
    v = A[(i * 2)]
    jump
Block 15:
    (merge from conditional jump !2)
    !3 = (k == 1)
    conditional jump !3
Block 16:
    jump
Block 17:
    v = A[((i * 2) + 1)]
    jump
Block 18:
    (merge from conditional jump !3)
    !4 = (k == 2)
    conditional jump !4
Block 19:
    jump
Block 20:
    v = B[((j * 2) + 1)]
    jump
Block 21:
    (merge from conditional jump !4)
    jump
Edges: (0, 1, *) (1, 3, F) (1, 2, T) (2, 4, *) (4, 6, F) (4, 5, T) (5, 7, *) (6, 1, *) (7, 9, F) (7, 8, T) (8, 10, F) (8, 11, T) (9, 4, *) (10, 12, *) (11, 13, F) (11, 14, T) (12, 7, *) (13, 15, *) (14, 15, *) (15, 16, F) (15, 17, T) (16, 18, *) (17, 18, *) (18, 19, F) (18, 20, T) (19, 21, *) (20, 21, *) (21, 12, *)
