Function minimal_points(X_coords: shared[list[int; ?]], Y_coords: shared[list[int; ?]], N: plaintext[int], result_X: shared[list[int; ?]], result_Y: shared[list[int; ?]]) -> tuple[shared[list[int; ?]], shared[list[int; ?]]]:
Entry block: 0
Exit block: 3
Block 0:
    min_X = []
    min_Y = []
    jump
Block 1:
    for i: plaintext[int] in range(0, N)
Block 2:
    bx = False
    jump
Block 3:
    !7 = (result_X, result_Y)
    return !7
Block 4:
    for j: plaintext[int] in range(0, N)
Block 5:
    !1 = (X_coords[j] < X_coords[i])
    !2 = (Y_coords[j] < Y_coords[i])
    !3 = (X_coords[j] < X_coords[i])
    !4 = (Y_coords[j] < Y_coords[i])
    !5 = (!3 and !4)
    bx = (bx or !5)
    jump
Block 6:
    val_X = result_X[i]
    val_Y = result_Y[i]
    !6 = not bx
    conditional jump !6
Block 7:
    jump
Block 8:
    val_X = X_coords[i]
    val_Y = Y_coords[i]
    jump
Block 9:
    (merge from conditional jump !6)
    result_X = Update(result_X, i, val_X)
    result_Y = Update(result_Y, i, val_Y)
    jump
Edges: (0, 1, *) (1, 3, F) (1, 2, T) (2, 4, *) (4, 6, F) (4, 5, T) (5, 4, *) (6, 7, F) (6, 8, T) (7, 9, *) (8, 9, *) (9, 1, *)
