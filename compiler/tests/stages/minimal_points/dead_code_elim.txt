Function minimal_points(X_coords!0: shared[list[int; ?]], Y_coords!0: shared[list[int; ?]], N!0: plaintext[int], result_X!0: shared[list[int; ?]], result_Y!0: shared[list[int; ?]]) -> tuple[shared[list[int; ?]], shared[list[int; ?]]]:
Entry block: 0
Exit block: 3
Block 0:
    jump
Block 1:
    result_X!1 = Φ(result_X!0, result_X!2)
    result_Y!1 = Φ(result_Y!0, result_Y!2)
    for i!1: plaintext[int] in range(0, N!0)
Block 2:
    bx!2 = False
    jump
Block 3:
    !7!1 = (result_X!1, result_Y!1)
    return !7!1
Block 4:
    bx!3 = Φ(bx!2, bx!4)
    for j!1: plaintext[int] in range(0, N!0)
Block 5:
    !3!3 = (X_coords!0[j!1] < X_coords!0[i!1])
    !4!3 = (Y_coords!0[j!1] < Y_coords!0[i!1])
    !5!3 = (!3!3 and !4!3)
    bx!4 = (bx!3 or !5!3)
    jump
Block 6:
    val_X!2 = result_X!1[i!1]
    val_Y!2 = result_Y!1[i!1]
    !6!2 = not bx!3
    conditional jump !6!2
Block 7:
    jump
Block 8:
    val_X!3 = X_coords!0[i!1]
    val_Y!3 = Y_coords!0[i!1]
    jump
Block 9:
    (merge from conditional jump !6!2)
    val_X!4 = MUX(!6!2, val_X!3, val_X!2)
    val_Y!4 = MUX(!6!2, val_Y!3, val_Y!2)
    result_X!2 = Update(result_X!1, i!1, val_X!4)
    result_Y!2 = Update(result_Y!1, i!1, val_Y!4)
    jump
Edges: (0, 1, *) (1, 3, F) (1, 2, T) (2, 4, *) (4, 6, F) (4, 5, T) (5, 4, *) (6, 7, F) (6, 8, T) (7, 9, *) (8, 9, *) (9, 1, *)
